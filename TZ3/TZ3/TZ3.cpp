#include <iostream>
#include <fstream>
#include <string>
using namespace std;
int main()
{
    ifstream f;
    f.open("CreativeTask3.txt");
    int count = 1; //число, которое мы будем искать в строке
    string s;
    getline(f, s);
    f.close();
    string res = ""; //итоговое предложение
    while (s.size() > 0) {
        int flag = 0; //показывает, нашли ли мы число (1 — да, 0 — нет)
        if (count < 10) {
            for (int i = 0; i < s.size() - 1; i++) {
                if (i == 0) {
                    if ((s[i] - '0') == count && s[i + 1] >= 'A' && s[i + 1] <= 'Z') {
                        int j = i;
                        int k = 1; //сколько впоследствии нужно удалить символов (изначально 1, потому что однозначное число)
                        while (s[j + 1] >= 'A' && s[j + 1] <= 'Z') {
                            res += s[j + 1];
                            k++;
                            j++;
                        }
                        s.erase(i, k); //удалить k символов, начиная с i элемента
                        flag = 1;
                    }
                    if (flag == 1) {
                        count++;
                        break;
                    }
                }
                else {
                    if ((s[i] - '0') == count && s[i + 1] >= 'A' && s[i + 1] <= 'Z' && s[i - 1] >= 'A' && s[i - 1] <= 'Z') {
                        int j = i;
                        int k = 1;
                        while (s[j + 1] >= 'A' && s[j + 1] <= 'Z') {
                            res += s[j + 1];
                            k++;
                            j++;
                        }
                        s.erase(i, k);
                        flag = 1;
                    }
                    if (flag == 1) {
                        count++;
                        break;
                    }
                }
            }
        }
        else {
            for (int i = 0; i < s.size() - 2; i++) {
                string countstr = to_string(s[i] - '0') + to_string(s[i + 1] - '0');
                if (countstr == to_string(count) && s[i] >= 48 && s[i] <= 57 && s[i + 1] >= 48 && s[i + 1] <= 57) {
                    int j = i;
                    int k = 2; //сколько впоследствии нужно удалить символов (изначально 2, потому что двузначное число)
                    while (s[j + 2] >= 'A' && s[j + 2] <= 'Z') {
                        res += s[j + 2];
                        k++;
                        j++;
                    }
                    s.erase(i, k);
                    flag = 1;
                }
                if (flag == 1) {
                    count++;
                    break;
                }
            }
        }
    }
    cout << res;
}
//ЧЗХ, объяснение?!?!?
//всё работает в цикле "пока строка не пуста" (после нахождения требуемой конструкции мы будем её удалять, поэтому в конце строка станет пустой)
//развилка: либо count — однозначное число (1), либо двузначное (2), это важно;
    // (1) проходимся по строке (идём до предпоследнего элемента, потому что нам точно известна конструкция "число + буква(-ы)", соответственно, последний элемент(-ы) — всегда буква(-ы));
    // (1) если мы нашли нужную цифру, то важно, чтобы слева и справа от неё были буквы (гарантия, что число однозначно); проблема в том, что элемент может быть нулевой, и перед ним ничего нет, поэтому;
    // (1) если элемент нулевой, то проверяем только последующий за ним элемент; иначе проверяем и предыдущий, и последующий;
    // (1) дальше добавляем в res каждую последующую за числом букву, за каждую увеличивая k на один;
    // (1) удаляем "использованные" число и набор букв за ним; отмечаем, что нужное число найдено (flag = 1), что позволит выйти из внутреннего цикла и увеличить count на 1;
    // (2) проходимся по строке до 3 с конца элемента (потому что конструкция "двузначное число + буква");
    // (2) ищем конструкцию "цифра + цифра", записываем их строку countstr (чтобы удобнее было сравнивать с count);
    // (2) если нашли нужное число, то дальше идентичные действия с (1);
//выводим res
//единственное, что нужно добавить: '0' в ASCII таблице имеет эквивалент в виде десятичного числа 48, поэтому, когда я пишу s[i]-'0', я подразумеваю вычитание 48 из числового эквивалента символа s[i] в ASCII таблице. 
//то есть, если s[i] — это '7', чей код ASCII равен 55, то 55-48=7, это считается строкой, поэтому её можно спокойно сравнивать с другими строками... Пиздец, что я написал...